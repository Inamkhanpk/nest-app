version: "3.8"

services:
  api-gateway:
    build:
      context: ./apps/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - user-service
      - order-service
    environment:
      - USER_SERVICE_HOST=user-service
      - ORDER_SERVICE_HOST=order-service

  user-service:
    build:
      context: ./apps/user-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - postgres
      - redis
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Inamkhan@123
      - POSTGRES_DB=user-service
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  order-service:
    build:
      context: ./apps/order-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      - mongodb
      - redis
      - kafka

  notification-service:
    build:
      context: ./apps/notification-service
      dockerfile: Dockerfile
    depends_on:
      - kafka

  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Inamkhan@123
      POSTGRES_DB: user_service
      POSTGRES_PORT: 5433
    ports:
      - "5433:5433"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:5
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - redis-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=redis
    networks:
      - redis-network
    depends_on:
      - redis

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper

    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka

    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:29092,PLAINTEXT_C://0.0.0.0:9093,PLAINTEXT_L://0.0.0.0:9092,
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:29092,PLAINTEXT_L://localhost:9092,PLAINTEXT_C://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_L:PLAINTEXT,PLAINTEXT_C:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui

    depends_on:
      - kafka
    ports:
      - "7777:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9093
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

volumes:
  postgres_data:
  mongodb_data:
  redis_data:

networks:
  redis-network:
    driver: bridge
